# Deep Paging Problem
# ● Saat ini, secara default Elasticsearch membatasi untuk mengembalikan hasil pencarian hanya 10K
# data (ingat, hasil pencarian, bukan total dokumen di index), yang artinya kita hanya bisa melihat
# hasil pencarian sampai hasil ke 10K
# ● Hal ini terjadi karena dalam Distributed System, terdapat masalah Deep Paging Problem
# ● Elasticsearch saat berjalan biasanya nanti akan memiliki lebih dari satu Node (aplikasi yang
# berjalan)
# ● Ketika kita mencari data, Elasticsearch harus mengumpulkan seluruh dari dari semua aplikasi yang
# berjalan, dan secara otomatis mengurutkan dan melakukan pagination ulang dari hasil seluruh
# aplikasi
# ● Semakin banyak data hasil pencarian, semakin berat, oleh karena itu hanya dibatasi sampai 10K,
# walaupun sebenarnya bisa kita naikkan angkanya, tapi tidak direkomendasikan

###
POST http://localhost:9200/categories/_delete_by_query
Content-Type: application/json

{
  "query": {
    "match_all": {}
  }
}

### update mapping
PUT http://localhost:9200/categories/_mapping
Content-Type: application/json

{
  "properties": {
    "id": {
      "type": "keyword"
    }
  }
}

### 
POST http://localhost:9200/_bulk
Content-Type: application/json

< categories.json

### 
POST http://localhost:9200/categories/_search
Content-Type: application/json

{
  "size": 100,
  "from": 10000,
  "query": {
    "match_all": {}
  }
}

###
POST http://localhost:9200/categories/_search
Content-Type: application/json

{
  "size": 100,
  "from": 0,
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "id": {
        "order": "asc"
      }
    }
  ]
}

# Scroll API
# ● Di Elasticsearch, untuk mengambil seluruh data pencarian, kita bisa menggunakan Scroll API
# ● Namun penggunaan Scroll API sekarang sudah tidak direkomendasikan lagi, lebih
# direkomendasikan menggunakan Search After
# ● https://www.elastic.co/guide/en/elasticsearch/reference/current/scroll-api.html

# Search After
# ● Lantas bagaimana jika kita ingin mengambil seluruh data pencarian? Misal untuk membuat
# dokumen CSV dari seluruh hasil pencarian
# ● Pada kasus itu, kita bisa memanfaatkan fitur bernama Search After
# ● Sederhananya, Search After akan selalu mengubah Query pencarian yang kita buat, sehingga hasil
# pencarian yang diambil akan selalu pencarian halaman pertama
# ● Search after membutuhkan sorting, dan dari sorting kita bisa menggunakan nilai tersebut untuk
# melakukan query selanjutnya di Search After

### dengan search after
POST http://localhost:9200/categories/_search
Content-Type: application/json

{
  "size": 100,
  "from": 0,
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "id": {
        "order": "asc"
      }
    }
  ],
  "search_after": [
    "10267"
  ]
}